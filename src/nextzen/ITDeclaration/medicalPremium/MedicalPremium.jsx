import React, { useState, useEffect } from 'react';
import {
  Grid,
  Typography,
  TextField,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Autocomplete,
} from '@mui/material';
import InputAdornment from '@mui/material/InputAdornment';
import { Icon } from '@iconify/react';
import Iconify from 'src/components/iconify/iconify';
import { DemoContainer } from '@mui/x-date-pickers/internals/demo';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import dayjs from 'dayjs';
import Divider from '@mui/material/Divider';
import { FormProvider, useForm } from 'react-hook-form';
import axios from 'axios';
import Snackbar from '@mui/material/Snackbar';
import MuiAlert from '@mui/material/Alert';
import { baseUrl } from 'src/nextzen/global/BaseUrl';

const Alert = React.forwardRef((props, ref) => (
  <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />
));
const headings = [
  'Type',
  'Policy Number',
  'Date Of Commencement Of Policy Or Date Paid',
  'Insured Persion Name(S)',
  'Relationship Of The Insured Person',

  'Pay Mode',
    "Policy Citizenship Type"
  ,'Amount Of Premium Or Expense',
'Eligible Decduction For The Policy Expense',
'Action',
];


export default function MedicalPremium() {
  // State for Snackbar
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [open, setOpen] = useState(true);
  const payscheduleTypes = [{ type: 'Permanent' }, { type: 'Temporary' }];
  const relationshipType = [{ type: 'Parents' }, { type: 'Self Spouse and CHild' }];
  const type = [
    { type: 'CGHS Contrubution' },
    { type: 'Medical Expenditure' },
    { type: 'Medical Insurance' },
    { type: 'Preventive Health Checkup' },
  ];
  const [isreloading, setISReloading] = useState(false);
  const policyCItizenshipType = [{ type: 'Normal' }, { type: 'Senior Citizen' }];
  const payMode = [{ type: 'Cahs ' }, { type: 'Other Than Cash' }];
  const [medicalTableData, setMedicalTableData] = useState([]);
  const [medicalTableDataDoc, setMedicalTableDataDoc] = useState([]);
  const [formData, setFormData] = useState({
    companyID: '',
    employeeID: '',
    type: '',
    policyNumber: '',
    dateOfCommencementOfPolicy: '',
    insuredPersonName: '',
    relationshipType: '',
    payMode: '',
    policyCitizenshipType: '',
    amountOfPremium: '',
    eligibleDeduction: '',
    fileName: [],
    fileContent: '',
  });
  const [dates, setDates] = useState({
    start_date: dayjs(new Date()),
    end_date: dayjs(new Date()),
  });

  const methods = useForm();

  const handleChange = (event) => {
    const { name, value } = event.target;

    setFormData({ ...formData, [name]: value });
    console.log(formData);
  };

  const handleAutocompleteChange = (name, selectedValue) => {
    let mappedValue;

    if (selectedValue === 'Yes') {
      mappedValue = 1;
    } else if (selectedValue === 'No') {
      mappedValue = 0;
    } else {
      mappedValue = selectedValue;
    }

    setFormData({ ...formData, [name]: mappedValue });
  };

  const saveMedicalDetails = async () => {
    const payload = {
      companyID: 'COMP1',
      employeeID: 'info4',
      type: formData?.type,
      policyNumber: formData?.policyNumber,
      dateOfCommencementOfPolicy: '2023-10-15',
      insuredPersonName: formData?.insuredPersonName,
      relationshipType: formData?.relationshipType,
      payMode: formData?.payMode,
      policyCitizenshipType: formData?.policyCitizenshipType,
      amountOfPremium: formData?.amountOfPremium,
      eligibleDeduction: formData?.eligibleDeduction,
      fileName: ['document1.pdf', 'document2.pdf'],
      fileContent: [
        '',

        '',
      ],
    };

    const config = {
      method: 'post',
      maxBodyLength: Infinity,
      url: 'http://192.168.0.236:3001/erp/addMedicalInsuranceDetails',
      headers: {
        Authorization:
          'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTk2Nzc5NjF9.0-PrJ-_SqDImEerYFE7KBm_SAjG7sjqgHUSy4PtMMiE',
        'Content-Type': 'text/plain',
      },
      data: payload,
    };
    const result = await axios
      .request(config)
      .then((response) => {
        if (response.status === 200) {
          setISReloading(!isreloading);
          setSnackbarSeverity('success');
          setSnackbarMessage('Rent details saved successfully!');
          setSnackbarOpen(true);
          console.log('success');
        }
      })
      .catch((error) => {
        setOpen(true);
        setSnackbarSeverity('error');
        setSnackbarMessage('Error saving rent details. Please try again.');
        setSnackbarOpen(true);
        console.log(error);
      });
    //  console.log(result, 'resultsreults');
  };

  const editMedicalDetails = async () => {
    const payload = {
      companyID: 'COMP1',
      employeeID: 'info4',
      data: [
        {
          ID: 3,
          employeeName: 'John Doe',
          premiumID: 3,
          type: formData?.type,
          policyNumber: formData?.policyNumber,
          dateOfCommencementOfPolicy: '2023-10-15',
          insuredPersonName: formData?.insuredPersonName,
          relationshipType: formData?.relationshipType,
          payMode: formData?.payMode,
          policyCitizenshipType: formData?.policyCitizenshipType,
          amountOfPremium: formData?.amountOfPremium,
          eligibleDeduction: formData?.eligibleDeduction,
          fileName: '',
          fileContent: '',
        },
      ],
    };

    const config = {
      method: 'put',
      maxBodyLength: Infinity,
      url: baseUrl +'updateMedicalInsuranceDetails',
      headers: {
        Authorization:
          'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTk2Nzc5NjF9.0-PrJ-_SqDImEerYFE7KBm_SAjG7sjqgHUSy4PtMMiE',
        'Content-Type': 'text/plain',
      },
      data: payload,
    };
    const result = await axios
      .request(config)
      .then((response) => {
        if (response.status === 200) {
          setISReloading(!isreloading);
          setSnackbarSeverity('success');
          setSnackbarMessage('Rent details saved successfully!');
          setSnackbarOpen(true);
          console.log('success');
        }
      })
      .catch((error) => {
        setOpen(true);
        setSnackbarSeverity('error');
        setSnackbarMessage('Error saving rent details. Please try again.');
        setSnackbarOpen(true);
        console.log(error);
      });
    //  console.log(result, 'resultsreults');
  };

  const getMedicalPremumDetails = async () => {
    const payload = { employeeId: 'info2' };

    const config = {
      method: 'post',
      maxBodyLength: Infinity,
      url: baseUrl+'getMedicalInsuranceDetails',
      headers: {
        Authorization:
          'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTk2Nzc5NjF9.0-PrJ-_SqDImEerYFE7KBm_SAjG7sjqgHUSy4PtMMiE ',
        'Content-Type': 'text/plain',
      },
      data: payload,
    };
    const result = await axios
      .request(config)
      .then((response) => {
        if (response.status === 200) {
          const rowsData = response?.data?.data;
          setMedicalTableData(rowsData);
          console.log(JSON.stringify(response?.data), 'resultMedical');

          console.log(response);
        }
      })
      .catch((error) => {
        console.log(error);
      });
      console.log(result, 'resultsreults');
  };
  console.log(medicalTableData, 'resultsreults');
  const getMedicalPremumDetailsDocs = async () => {
    const payload = { employeeId: 'info2' };

    const config = {
      method: 'post',
      maxBodyLength: Infinity,
      url: baseUrl +'getMedicalInsuranceDocuments',
      headers: {
        Authorization:
          'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2OTk2Nzc5NjF9.0-PrJ-_SqDImEerYFE7KBm_SAjG7sjqgHUSy4PtMMiE ',
        'Content-Type': 'text/plain',
      },
      data: payload,
    };
    const result = await axios
      .request(config)
      .then((response) => {
        if (response.status === 200) {
          const rowsData = response?.data?.data;
          setMedicalTableDataDoc(rowsData);
          console.log(JSON.stringify(response?.data), 'setMedicalTableDataDoc');

          console.log(response);
        }
      })
      .catch((error) => {
        console.log(error);
      });
    //  console.log(result, 'resultsreults');
  };

  const snackBarAlertHandleClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setSnackbarOpen(false);
    setOpen(false);
  };

  useEffect(() => {
    const fetchData = async () => {
      await getMedicalPremumDetails();
      getMedicalPremumDetailsDocs()
    };
    fetchData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isreloading]);
  console.log(medicalTableData?.MedicalDocs , "medicalDATA", medicalTableData?.MedicalDocs?.length)
  return (
    <div>
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={snackBarAlertHandleClose}
        anchorOrigin={{
          vertical: 'top',
          horizontal: 'center',
        }}
      >
        <Alert
          onClose={snackBarAlertHandleClose}
          severity={snackbarSeverity}
          sx={{ width: '100%' }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
      <FormProvider {...methods}>
        <Grid container spacing={2} style={{ marginTop: '1rem' }}>
          <Grid
            container
            spacing={2}
            alignItems="center"
            justifyContent="flex-end"
            direction="row"
            style={{ marginBottom: '1rem' }}
          >
            <Grid item>
              <TextField
                sx={{ width: '20vw' }}
                // value={filters.name}
                // onChange={handleFilterName}
                placeholder="Search..."
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Iconify icon="eva:search-fill" sx={{ color: 'text.disabled' }} />
                    </InputAdornment>
                  ),
                  border: 'none',
                }}
              />
            </Grid>
            <Grid item>
              <Button className="button">Filter</Button>
            </Grid>
            <Grid item>
              <Button className="button">Report</Button>
            </Grid>
          </Grid>
          {/* Row 1 */}
          <Grid item container xs={12} spacing={2}>
            <Grid item xs={4}>
              <Autocomplete
                disablePortal
                name="type"
                id="combo-box-demo"
                options={type.map((employeepayType) => employeepayType.type)}
                value={formData.type}
                onChange={(event, newValue) => handleAutocompleteChange('type', newValue)}
                // sx={{ width: 300 }}
                renderInput={(params) => <TextField {...params} label="Type" />}
              />
            </Grid>
            <Grid item xs={4}>
              <TextField
                label="Policy Number"
                name="policyNumber"
                value={formData.policyNumber}
                onChange={handleChange}
                variant="outlined"
                fullWidth
              />
            </Grid>
            <Grid item xs={4} style={{ paddingTop: '9px' }}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DemoContainer components={['DatePicker']}>
                  <DatePicker
                    sx={{ width: '100%', paddingLeft: '3px' }}
                    label="Date Of Commencement Of Policy Or Date Paid"
                    value={dates?.start_date}
                    defaultValue={dayjs(new Date())}
                    onChange={(newValue) => {
                      setDates((prev) => ({
                        ...prev,
                        start_date: newValue,
                      }));
                    }}
                  />
                </DemoContainer>
              </LocalizationProvider>
            </Grid>
          </Grid>

          {/* Row 2 */}

          <Grid item container xs={12} spacing={2}>
            <Grid item xs={4}>
              <TextField
                label="Insured Persion Name(S)"
                variant="outlined"
                fullWidth
                name="policyNumber"
                value={formData.insuredPersonName}
                onChange={handleChange}
              />
            </Grid>
            <Grid item xs={4}>
              <Autocomplete
                disablePortal
                name="relationship"
                id="combo-box-relationshipType"
                options={relationshipType.map((employeepayType) => employeepayType.type)}
                value={formData.relationship}
                onChange={(event, newValue) =>
                  handleAutocompleteChange('relationshipType', newValue)
                }
                // sx={{ width: 300 }}
                renderInput={(params) => <TextField {...params} label="Relationship Type" />}
              />
            </Grid>
            <Grid item xs={4}>
              <Autocomplete
                disablePortal
                name="policyCitizenshipType"
                id="combo-box-demo"
                options={policyCItizenshipType.map((employeepayType) => employeepayType.type)}
                value={formData.policyCitizenshipType}
                onChange={(event, newValue) =>
                  handleAutocompleteChange('policyCitizenshipType', newValue)
                }
                // sx={{ width: 300 }}
                renderInput={(params) => <TextField {...params} label="Policy Citizenship Type" />}
              />
            </Grid>
          </Grid>

          <Grid item container xs={12} spacing={2}>
            <Grid item xs={4}>
              <Autocomplete
                disablePortal
                name="Pay Mode"
                id="combo-box-demo"
                options={payMode.map((employeepayType) => employeepayType.type)}
                value={formData.payMode}
                onChange={(event, newValue) => handleAutocompleteChange('payMode', newValue)}
                // sx={{ width: 300 }}
                renderInput={(params) => <TextField {...params} label="Pay Mode" />}
              />
            </Grid>
            <Grid item xs={4}>
              <TextField
                label="Amount Of Premium"
                variant="outlined"
                fullWidth
                name="policyNumber"
                value={formData.amountOfPremium}
                onChange={handleChange}
              />
            </Grid>
            <Grid item xs={4}>
              <TextField
                label="Eligible Deduction"
                variant="outlined"
                fullWidth
                name="policyNumber"
                value={formData.eligibleDeduction}
                onChange={handleChange}
              />
            </Grid>
          </Grid>
          {/* My buttons  */}
          <Grid item container xs={12} spacing={2}>
            <Grid
              item
              container
              xs={6}
              spacing={2}
              alignItems="center"
              justifyContent="flex-Start"
              direction="row"
              style={{ marginBottom: '1rem' }}
            >
              <Grid item>
                <Button className="button">Attchement</Button>
              </Grid>
              <Grid item>
                <Button className="button" onClick={editMedicalDetails}>
                  Save
                </Button>
              </Grid>
              <Grid item>
                <Button className="button">Cancel</Button>
              </Grid>
            </Grid>
          </Grid>
          {/* card */}
        </Grid>

        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                {headings.map((heading, index) => (
                  <TableCell
                    key={index}
                    style={{
                      backgroundColor: '#2196f3',
                      color: 'white',
                      whiteSpace: 'nowrap', // Prevent text wrapping
                      overflow: 'hidden',
                      textOverflow: 'ellipsis',
                    }}
                  >
                    {heading}
                  </TableCell>
                ))}
              </TableRow>
            </TableHead>
            <TableBody>
              {medicalTableData?.MedicalDocs?.length > 0 &&
                medicalTableData?.MedicalDocs?.map((row, rowIndex) => (
                  <TableRow key={rowIndex}>
                    {/* <TableCell>{rowIndex + 1}</TableCell> */}
                    <TableCell>{row.type}</TableCell>
                    <TableCell>{row.policyNumber}</TableCell>
                    <TableCell>{row.dateOfCommencementOfPolicy}</TableCell>
                    <TableCell>{row.insuredPersonName}</TableCell>
                    <TableCell>{row.relationshipType}</TableCell>
                    <TableCell>{row.payMode}</TableCell>
                    <TableCell>{row.policyCitizenshipType}</TableCell>
                    <TableCell>{row.amountOfPremium}</TableCell>
                    <TableCell>{row.eligibleDeduction}</TableCell>

                    <TableCell>{row.action}</TableCell>
                  </TableRow>
                ))}
            </TableBody>
          </Table>
        </TableContainer>
        <Grid
          item
          container
          xs={12}
          spacing={2}
          alignItems="center"
          justifyContent="center"
          direction="column"
          style={{ marginBottom: '1rem', marginTop: '1rem' }}
        >
          <Grid xs={6}>
            <Grid
              item
              container
              xs={12}
              style={{
                padding: '10px',
                backgroundColor: '#2196f3',
                color: 'white',
                border: 'none',
              }}
            >
              <Grid item xs={6}>
                Total Decduction U/S 80D
              </Grid>
              <Grid item xs={6}>
                Overal Deduction
              </Grid>
            </Grid>
            <Divider style={{ backgroundColor: 'black' }} />
            <Grid item container xs={12} style={{ backgroundColor: '#f0eded', padding: '10px' }}>
              <Grid item xs={6}>
                Self Spouse & Child
              </Grid>
              <Grid item xs={6}>
                0
              </Grid>
            </Grid>
            <Divider style={{ backgroundColor: 'black' }} />
            <Grid item container xs={12} style={{ padding: '10px' }}>
              <Grid item xs={6}>
                Parent(s)
              </Grid>
              <Grid item xs={6}>
                0
              </Grid>
            </Grid>
            <Divider style={{ backgroundColor: 'black' }} />
            <Grid item container xs={12} style={{ backgroundColor: '#f0eded', padding: '10px' }}>
              <Grid item xs={6}>
                Total Deduction
              </Grid>
              <Grid item xs={6}>
                0
              </Grid>
            </Grid>
            <Divider style={{ backgroundColor: 'black' }} />
          </Grid>
        </Grid>
      </FormProvider>
    </div>
  );
}
